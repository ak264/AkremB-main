---
import { projectStatuses, statusCategories } from '../config/projectStatus';

// Group statuses by category
const groupedStatuses = Object.values(statusCategories).map(category => {
  const statuses = projectStatuses.filter(status => status.category === category.id);
  return {
    category,
    statuses
  };
});
---

<div class="status-filter mb-6">
  <div class="flex flex-wrap items-center gap-3">
    <div class="relative inline-block w-full sm:w-64">
      <select
        id="status-select"
        class="appearance-none w-full px-4 py-2 rounded-md bg-white dark:bg-zinc-800 border border-gray-300 dark:border-zinc-700 
               text-gray-900 dark:text-white shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
      >
        <option value="all">All Statuses</option>
        
        {groupedStatuses.map(group => (
          <optgroup label={`${group.category.emoji} ${group.category.label}`} class="text-gray-500 dark:text-gray-400">
            {group.statuses.map(status => (
              <option value={status.id} data-emoji={status.emoji}>
                {status.emoji} {status.label}
              </option>
            ))}
          </optgroup>
        ))}
      </select>
      <div class="absolute inset-y-0 right-0 flex items-center px-2 pointer-events-none">
        <svg class="h-5 w-5 text-gray-500 dark:text-gray-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
          <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
        </svg>
      </div>
    </div>
    
    <!-- Active status filter pill -->
    <div id="active-status-pill" class="hidden">
      <div class="active-status-pill">
        <span id="status-emoji"></span>
        <span id="status-label"></span>
        <button class="clear-status-btn" aria-label="Clear status filter">
          <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <line x1="18" y1="6" x2="6" y2="18"></line>
            <line x1="6" y1="6" x2="18" y2="18"></line>
          </svg>
        </button>
      </div>
    </div>
    
    <!-- Quick status filters for desktop -->
    <div class="hidden md:flex items-center gap-2 flex-wrap">
      {projectStatuses.slice(0, 3).map(status => (
        <button 
          class="quick-status-btn"
          data-status-id={status.id}
          data-emoji={status.emoji}
          data-label={status.label}
        >
          {status.emoji} {status.label}
        </button>
      ))}
    </div>
  </div>
  
  <!-- Status filter result message -->
  <div id="status-filter-message" class="mt-3 text-sm text-gray-600 dark:text-gray-400 hidden">
    Showing projects with status: <span id="status-display" class="font-medium text-gray-900 dark:text-white"></span>
  </div>
</div>

<script>
  // Initialize filtering functionality
  document.addEventListener('DOMContentLoaded', function() {
    const statusSelect = document.getElementById('status-select');
    const projectCards = document.querySelectorAll('.projects-grid > div');
    const activePill = document.getElementById('active-status-pill');
    const statusEmoji = document.getElementById('status-emoji');
    const statusLabel = document.getElementById('status-label');
    const clearBtn = document.querySelector('.clear-status-btn');
    const statusMessage = document.getElementById('status-filter-message');
    const statusDisplay = document.getElementById('status-display');
    const quickButtons = document.querySelectorAll('.quick-status-btn');
    
    if (!statusSelect || !projectCards.length) return;
    
    function filterByStatus(selectedValue) {
      // Update the select dropdown
      statusSelect.value = selectedValue;
      
      // Show all projects if "all" is selected
      if (selectedValue === 'all') {
        projectCards.forEach(card => {
          card.style.display = '';
        });
        
        // Hide active pill and message
        if (activePill) activePill.classList.add('hidden');
        if (statusMessage) statusMessage.classList.add('hidden');
        
        return;
      }
      
      // Filter projects based on selected status
      let visibleCount = 0;
      projectCards.forEach(card => {
        const statusBadge = card.querySelector('.project-status');
        if (!statusBadge) return;
        
        const statusId = statusBadge.getAttribute('data-status-id');
        
        if (statusId === selectedValue) {
          card.style.display = '';
          visibleCount++;
        } else {
          card.style.display = 'none';
        }
      });
      
      // Update active pill
      if (activePill && statusEmoji && statusLabel) {
        const option = Array.from(statusSelect.options).find(opt => opt.value === selectedValue);
        if (option) {
          const emoji = option.getAttribute('data-emoji') || '';
          statusEmoji.textContent = emoji + ' ';
          statusLabel.textContent = option.textContent.trim().replace(emoji, '').trim();
          activePill.classList.remove('hidden');
          
          // Update status message
          if (statusMessage && statusDisplay) {
            statusDisplay.textContent = option.textContent.trim();
            statusMessage.classList.remove('hidden');
          }
        }
      }
      
      // Update quick buttons active state
      quickButtons.forEach(btn => {
        if (btn.getAttribute('data-status-id') === selectedValue) {
          btn.classList.add('active');
        } else {
          btn.classList.remove('active');
        }
      });
    }
    
    // Listen for changes to the select input
    statusSelect.addEventListener('change', () => {
      filterByStatus(statusSelect.value);
    });
    
    // Clear button click handler
    if (clearBtn) {
      clearBtn.addEventListener('click', () => {
        filterByStatus('all');
      });
    }
    
    // Quick button click handlers
    quickButtons.forEach(btn => {
      btn.addEventListener('click', () => {
        const statusId = btn.getAttribute('data-status-id');
        filterByStatus(statusId);
      });
    });
    
    // Initialize filtering
    filterByStatus('all');
  });
</script>

<style>
  /* Style the select dropdown */
  .active-status-pill {
    @apply flex items-center gap-1.5 px-3 py-1.5 rounded-full
           bg-indigo-100 dark:bg-indigo-900
           text-indigo-800 dark:text-indigo-200
           border border-indigo-300 dark:border-indigo-700;
  }
  
  .clear-status-btn {
    @apply inline-flex items-center justify-center w-4 h-4 rounded-full
           hover:bg-indigo-200 dark:hover:bg-indigo-800
           text-indigo-600 dark:text-indigo-400
           transition-colors;
  }
  
  .quick-status-btn {
    @apply px-2.5 py-1 text-xs rounded-md
           bg-gray-100 dark:bg-zinc-800
           text-gray-800 dark:text-zinc-200
           hover:bg-gray-200 dark:hover:bg-zinc-700 
           border border-gray-200 dark:border-zinc-700
           transition-colors;
  }
  
  .quick-status-btn.active {
    @apply bg-indigo-100 dark:bg-indigo-900 border-indigo-300 dark:border-indigo-700 
           text-indigo-800 dark:text-indigo-200;
  }
  
  /* Style optgroup in dark mode */
  @media (prefers-color-scheme: dark) {
    select option, 
    select optgroup {
      background-color: #27272a;
    }
  }
  
  :global(.dark) select option,
  :global(.dark) select optgroup {
    background-color: #27272a;
  }
</style>
