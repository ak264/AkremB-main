---
import type { CollectionEntry } from 'astro:content';
import ProjectStatus from './ProjectStatus.astro';

interface Props {
  project: CollectionEntry<'projects'>;
}

const { project } = Astro.props;
const { title, description, tags = [], githubLink, demoLink, status } = project.data;

// Determine status color
let statusColor = '';
switch (status) {
  case 'active':
    statusColor = 'bg-green-500';
    break;
  case 'inactive':
    statusColor = 'bg-red-500';
    break;
  case 'archived':
    statusColor = 'bg-yellow-500';
    break;
  default:
    statusColor = 'bg-gray-500';
}

// Truncate description
const truncatedDescription = description.length > 100
  ? description.substring(0, 100).trim() + '...'
  : description;

// Truncate tags (Max 20 chars)
const truncatedTags = tags.map((tag: string) => {
  return tag.length > 20 ? tag.substring(0, 20).trim() + '...' : tag;
});

---

<div class="project-card rounded-lg overflow-hidden bg-white dark:bg-zinc-800 border border-gray-200 dark:border-zinc-700 hover:border-gray-300 dark:hover:border-zinc-600 transition-all h-full flex flex-col" data-status="{status}" data-tags="{tags.join(',')}" data-project-id="{project.id}">
  <div class="p-6 flex flex-col h-full">
    <!-- Top section: Tags + Status with consistent height -->
    <div class="card-header flex justify-between items-start mb-4 min-h-[32px]">
      <div class="tag-container flex overflow-hidden max-w-[70%]">
        {truncatedTags.map((tag: string, index: number) => (
          <span 
            class={`tag text-xs px-2 py-1 rounded-full bg-gray-200 dark:bg-zinc-700 text-gray-800 dark:text-zinc-300 whitespace-nowrap flex-shrink-0 ${index > 0 ? 'ml-2' : ''}`}
            data-tag-index={index}
          >
            {tag}
          </span>
        ))}
        <span 
          class="tag-more text-xs px-2 py-1 rounded-full bg-gray-200 dark:bg-zinc-700 text-gray-800 dark:text-zinc-300 opacity-70 cursor-help whitespace-nowrap ml-1"
        >
          +0
        </span>
      </div>
      <ProjectStatus statusId={status} showEmoji={true} />
    </div>
    
    <h3 class="text-xl font-bold text-gray-900 dark:text-white mb-2">
      {title}
    </h3>
    
    <p class="text-gray-700 dark:text-zinc-300 mb-6 line-clamp-3 flex-grow">
      {truncatedDescription}
    </p>
    
    <div class="flex flex-wrap gap-4 mt-auto">
      <a href={`/project/${project.slug}`} class="text-gray-900 dark:text-white hover:text-gray-700 dark:hover:text-zinc-300 transition-colors">
        Details
      </a>
      
      {githubLink && (
        <a href={githubLink} target="_blank" rel="noopener noreferrer" class="text-gray-900 dark:text-white hover:text-gray-700 dark:hover:text-zinc-300 transition-colors flex items-center gap-1">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="currentColor" viewBox="0 0 24 24">
            <path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"/>
          </svg>
          GitHub
        </a>
      )}
      
      {demoLink && (
        <a href={demoLink} target="_blank" rel="noopener noreferrer" class="text-gray-900 dark:text-white hover:text-gray-700 dark:hover:text-zinc-300 transition-colors flex items-center gap-1">
          Demo
          <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="ml-1">
            <path d="M15 3h6v6"></path>
            <path d="M10 14L21 3"></path>
            <path d="M18 13v6a2 2 0 01-2 2H5a2 2 0 01-2-2V8a2 2 0 012-2h6"></path>
          </svg>
        </a>
      )}
    </div>
  </div>
</div>

<style>
  /* Tag container styles */
  .tag-container {
    display: flex;
    flex-wrap: nowrap; /* Don't wrap tags */
    gap: 0; /* We'll use margin-left instead for more control */
    max-width: 70%;
    overflow: hidden;
    position: relative;
  }
  
  .tag {
    white-space: nowrap;
    flex-shrink: 0; /* Don't shrink tags */
  }
  
  .tag-more {
    flex-shrink: 1; /* Allow more tag to shrink a bit */
  }
  
  .card-header {
    contain: layout style;
  }
  
  /* Mobile optimizations */
  @media (max-width: 640px) {
    div.p-6 {
      padding: 1rem;
    }
    
    span.text-xs {
      font-size: 0.7rem;
      padding: 0.2rem 0.4rem;
    }
    
    h3.text-xl {
      font-size: 1.1rem;
    }
    
    p.line-clamp-3 {
      -webkit-line-clamp: 2; /* Show fewer lines on mobile */
    }
    
    .tag-container {
      max-width: 65%;
    }
  }
  
  /* Performance optimization */
  div.rounded-lg {
    contain: content;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const projectCards = document.querySelectorAll('.project-card');

    projectCards.forEach(card => {
      const tagContainer = card.querySelector('.tag-container') as HTMLElement;
      const allTags = Array.from(card.querySelectorAll('.tag')) as HTMLElement[];
      const tagMore = card.querySelector('.tag-more') as HTMLElement;

      if (!tagContainer || allTags.length === 0 || !tagMore) return;

      // --- Refined adjustVisibleTags function ---
      const adjustVisibleTags = () => {
        const containerWidth = tagContainer.offsetWidth;
        let totalWidth = 0;
        let visibleTagsCount = 0;

        // Temporarily show tagMore to measure it, then hide if necessary
        const originalMoreDisplay = tagMore.style.display;
        tagMore.style.display = 'inline-block'; // Ensure it's measurable
        const tagMoreWidth = tagMore.offsetWidth;
        // Estimate margin (ml-1 = 4px, ml-2 = 8px approx)
        const tagMoreMargin = 4; 
        const tagMargin = 8; 
        tagMore.style.display = originalMoreDisplay; // Restore original (likely 'none')

        // Reset: show all tags initially to measure them correctly
        allTags.forEach(tag => tag.style.display = 'inline-block');
        tagMore.style.display = 'none';

        for (let i = 0; i < allTags.length; i++) {
          const tag = allTags[i];
          const tagWidth = tag.offsetWidth;
          const currentMargin = i > 0 ? tagMargin : 0;
          const widthWithCurrentTag = totalWidth + currentMargin + tagWidth;

          // Check if *this* tag fits
          if (widthWithCurrentTag <= containerWidth) {
            // Now check if *this* tag PLUS the '+X' indicator would fit if needed
            const potentialWidthWithMore = widthWithCurrentTag + tagMoreMargin + tagMoreWidth;
            const needMoreIndicator = i < allTags.length - 1;
            
            if (needMoreIndicator && potentialWidthWithMore > containerWidth) {
              // This tag fits, but adding '+X' would overflow. Stop here.
              break;
            } else {
              // This tag fits, and '+X' would also fit if needed, or it's the last tag.
              totalWidth = widthWithCurrentTag;
              visibleTagsCount++;
            }
          } else {
            // This tag doesn't even fit by itself. Stop.
            break;
          }
        }

        // Apply visibility
        const hiddenCount = allTags.length - visibleTagsCount;

        allTags.forEach((tag, index) => {
          tag.style.display = index < visibleTagsCount ? 'inline-block' : 'none';
        });

        if (hiddenCount > 0) {
          tagMore.textContent = `+${hiddenCount}`;
          tagMore.style.display = 'inline-block';
          // Optional: Add a title attribute for hover effect
          const hiddenTagTexts = allTags.slice(visibleTagsCount).map(t => t.textContent?.trim()).filter(Boolean);
          tagMore.title = hiddenTagTexts.join(', ');
        } else {
          tagMore.style.display = 'none';
          tagMore.title = ''; // Clear title
        }
      };
      // --- End of refined function ---

      // Initial calculation
      adjustVisibleTags();

      // Recalculate on resize
      let resizeTimeout: NodeJS.Timeout | number | undefined;
      window.addEventListener('resize', () => {
        clearTimeout(resizeTimeout);
        resizeTimeout = setTimeout(adjustVisibleTags, 100); // Debounce resize events
      });
    });
  });
</script>
